#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# OpenBACH is a generic testbed able to control/configure multiple
# network/physical entities (under test) and collect data from them. It is
# composed of an Auditorium (HMIs), a Controller, a Collector and multiple
# Agents (one for each network entity that wants to be tested).
#
#
# Copyright © 2016-2023 CNES
#
#
# This file is part of the OpenBACH testbed.
#
#
# OpenBACH is a free software : you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY, without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program. If not, see http://www.gnu.org/licenses/.


"""Call the openbach-function get_scenario_instance_data"""


__author__ = 'Viveris Technologies'
__credits__ = '''Contributors:
 * Mathias ETTINGER <mathias.ettinger@toulouse.viveris.com>
'''

from pathlib import Path
from auditorium_scripts.frontend import FrontendBase


class GetScenarioInstanceData(FrontendBase):
    def __init__(self):
        super().__init__('OpenBACH — Get the Data Generated by a Scenario Instance')
        self.parser.add_argument(
                'scenario_instance_id', type=int,
                help='scenario instance ID to retrieve')
        self.parser.add_argument(
                '-f', '--file', '--add-file', action='append', default=[],
                nargs=2, metavar=('JOB_NAME', 'STAT_NAME'),
                help='include the files generated by the given statistic '
                'of the given job into the downloaded tarball.')
        self.parser.add_argument(
                '--path', type=Path, default=Path(),
                help='Path wherein storing the obtained data')

    def execute(self, show_response_content=True):
        instance_id = self.args.scenario_instance_id
        files = dict(self.args.file)
        route = 'scenario_instance/{}/archive'.format(instance_id)

        response = self.request(
                'GET', route, **files,
                show_response_content=show_response_content)
        filename = 'scenario_instance_{}'.format(instance_id)
        filename += '.tar.gz' if files else '.csv'
        self.args.path.mkdir(parents=True, exist_ok=True)
        filepath = str(Path(self.args.path, filename))
        with open(filepath, 'wb') as f:
            f.write(response.content)

        return response


if __name__ == '__main__':
    GetScenarioInstanceData.autorun()
